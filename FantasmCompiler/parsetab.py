
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CAR CMPI CMPR COMA DDR DOSPUNTOS ESP FIN GDR IMM INICIO LABEL MOD MOVI MOVR MUL PUNTOCOMA REG RES SAL SIG SMY SUM\n    Start : code\n    \n    code : INICIO DOSPUNTOS cuerpo FIN\n    \n    cuerpo : instruccion\n            | label\n\n    \n    label : LABEL DOSPUNTOS cuerpo\n            | empty\n    \n    instruccion : arimtethicInstruction\n                  | CompareInstruction\n                  | memoryInstruction\n                  | jumpInstruction\n                  | espInstruction\n    \n    espInstruction : ESP PUNTOCOMA cuerpo\n                    | empty\n    \n    CompareInstruction : CompareInstName REG COMA REG PUNTOCOMA cuerpo\n                        | CompareInstName REG COMA IMM PUNTOCOMA cuerpo\n                        | empty\n    \n    jumpInstruction : JumpInstName LABEL PUNTOCOMA cuerpo\n    | empty\n    \n    memoryInstruction : MemoryInstName REG COMA REG PUNTOCOMA cuerpo\n                        | MemoryInstName REG COMA IMM PUNTOCOMA cuerpo\n                        | empty\n    \n    arimtethicInstruction : ArithmeticInstName REG COMA REG COMA REG PUNTOCOMA cuerpo\n                | ArithmeticInstName REG COMA REG COMA IMM PUNTOCOMA cuerpo\n                | empty\n    \n    CompareInstName :  CMPR\n                        | CMPI\n\n    \n    JumpInstName :  SAL\n            | SIG\n            | SMY\n    \n    MemoryInstName : GDR\n            | CAR\n            | MOVR\n            | MOVI\n    \n    ArithmeticInstName :  SUM\n            | RES\n            | MOD\n            | MUL\n            | DDR\n            | SAL\n    \n    empty :\n    '
    
_lr_action_items = {'INICIO':([0,],[3,]),'$end':([1,2,34,],[0,-1,-2,]),'DOSPUNTOS':([3,13,],[4,35,]),'LABEL':([4,18,25,32,33,35,40,45,54,55,56,57,64,65,],[13,39,-27,-28,-29,13,13,13,13,13,13,13,13,13,]),'ESP':([4,35,40,45,54,55,56,57,64,65,],[19,19,19,19,19,19,19,19,19,19,]),'FIN':([4,5,6,7,8,9,10,11,12,14,35,40,41,45,46,52,54,55,56,57,60,61,62,63,64,65,66,67,],[-40,34,-3,-4,-7,-8,-9,-10,-11,-6,-40,-40,-5,-40,-12,-17,-40,-40,-40,-40,-14,-15,-19,-20,-40,-40,-22,-23,]),'SUM':([4,35,40,45,54,55,56,57,64,65,],[20,20,20,20,20,20,20,20,20,20,]),'RES':([4,35,40,45,54,55,56,57,64,65,],[21,21,21,21,21,21,21,21,21,21,]),'MOD':([4,35,40,45,54,55,56,57,64,65,],[22,22,22,22,22,22,22,22,22,22,]),'MUL':([4,35,40,45,54,55,56,57,64,65,],[23,23,23,23,23,23,23,23,23,23,]),'DDR':([4,35,40,45,54,55,56,57,64,65,],[24,24,24,24,24,24,24,24,24,24,]),'SAL':([4,35,40,45,54,55,56,57,64,65,],[25,25,25,25,25,25,25,25,25,25,]),'CMPR':([4,35,40,45,54,55,56,57,64,65,],[26,26,26,26,26,26,26,26,26,26,]),'CMPI':([4,35,40,45,54,55,56,57,64,65,],[27,27,27,27,27,27,27,27,27,27,]),'GDR':([4,35,40,45,54,55,56,57,64,65,],[28,28,28,28,28,28,28,28,28,28,]),'CAR':([4,35,40,45,54,55,56,57,64,65,],[29,29,29,29,29,29,29,29,29,29,]),'MOVR':([4,35,40,45,54,55,56,57,64,65,],[30,30,30,30,30,30,30,30,30,30,]),'MOVI':([4,35,40,45,54,55,56,57,64,65,],[31,31,31,31,31,31,31,31,31,31,]),'SIG':([4,35,40,45,54,55,56,57,64,65,],[32,32,32,32,32,32,32,32,32,32,]),'SMY':([4,35,40,45,54,55,56,57,64,65,],[33,33,33,33,33,33,33,33,33,33,]),'REG':([15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,42,43,44,53,],[36,37,38,-34,-35,-36,-37,-38,-39,-25,-26,-30,-31,-32,-33,47,48,50,58,]),'PUNTOCOMA':([19,39,48,49,50,51,58,59,],[40,45,54,55,56,57,64,65,]),'COMA':([36,37,38,47,],[42,43,44,53,]),'IMM':([43,44,53,],[49,51,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'code':([0,],[2,]),'cuerpo':([4,35,40,45,54,55,56,57,64,65,],[5,41,46,52,60,61,62,63,66,67,]),'instruccion':([4,35,40,45,54,55,56,57,64,65,],[6,6,6,6,6,6,6,6,6,6,]),'label':([4,35,40,45,54,55,56,57,64,65,],[7,7,7,7,7,7,7,7,7,7,]),'arimtethicInstruction':([4,35,40,45,54,55,56,57,64,65,],[8,8,8,8,8,8,8,8,8,8,]),'CompareInstruction':([4,35,40,45,54,55,56,57,64,65,],[9,9,9,9,9,9,9,9,9,9,]),'memoryInstruction':([4,35,40,45,54,55,56,57,64,65,],[10,10,10,10,10,10,10,10,10,10,]),'jumpInstruction':([4,35,40,45,54,55,56,57,64,65,],[11,11,11,11,11,11,11,11,11,11,]),'espInstruction':([4,35,40,45,54,55,56,57,64,65,],[12,12,12,12,12,12,12,12,12,12,]),'empty':([4,35,40,45,54,55,56,57,64,65,],[14,14,14,14,14,14,14,14,14,14,]),'ArithmeticInstName':([4,35,40,45,54,55,56,57,64,65,],[15,15,15,15,15,15,15,15,15,15,]),'CompareInstName':([4,35,40,45,54,55,56,57,64,65,],[16,16,16,16,16,16,16,16,16,16,]),'MemoryInstName':([4,35,40,45,54,55,56,57,64,65,],[17,17,17,17,17,17,17,17,17,17,]),'JumpInstName':([4,35,40,45,54,55,56,57,64,65,],[18,18,18,18,18,18,18,18,18,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> code','Start',1,'p_Start','FantASMSintax.py',12),
  ('code -> INICIO DOSPUNTOS cuerpo FIN','code',4,'p_Code','FantASMSintax.py',18),
  ('cuerpo -> instruccion','cuerpo',1,'p_cuerpo','FantASMSintax.py',23),
  ('cuerpo -> label','cuerpo',1,'p_cuerpo','FantASMSintax.py',24),
  ('label -> LABEL DOSPUNTOS cuerpo','label',3,'p_label','FantASMSintax.py',32),
  ('label -> empty','label',1,'p_label','FantASMSintax.py',33),
  ('instruccion -> arimtethicInstruction','instruccion',1,'p_instruccion','FantASMSintax.py',43),
  ('instruccion -> CompareInstruction','instruccion',1,'p_instruccion','FantASMSintax.py',44),
  ('instruccion -> memoryInstruction','instruccion',1,'p_instruccion','FantASMSintax.py',45),
  ('instruccion -> jumpInstruction','instruccion',1,'p_instruccion','FantASMSintax.py',46),
  ('instruccion -> espInstruction','instruccion',1,'p_instruccion','FantASMSintax.py',47),
  ('espInstruction -> ESP PUNTOCOMA cuerpo','espInstruction',3,'p_espInstruction','FantASMSintax.py',54),
  ('espInstruction -> empty','espInstruction',1,'p_espInstruction','FantASMSintax.py',55),
  ('CompareInstruction -> CompareInstName REG COMA REG PUNTOCOMA cuerpo','CompareInstruction',6,'p_CompareInstruction','FantASMSintax.py',63),
  ('CompareInstruction -> CompareInstName REG COMA IMM PUNTOCOMA cuerpo','CompareInstruction',6,'p_CompareInstruction','FantASMSintax.py',64),
  ('CompareInstruction -> empty','CompareInstruction',1,'p_CompareInstruction','FantASMSintax.py',65),
  ('jumpInstruction -> JumpInstName LABEL PUNTOCOMA cuerpo','jumpInstruction',4,'p_jumpInstruction','FantASMSintax.py',72),
  ('jumpInstruction -> empty','jumpInstruction',1,'p_jumpInstruction','FantASMSintax.py',73),
  ('memoryInstruction -> MemoryInstName REG COMA REG PUNTOCOMA cuerpo','memoryInstruction',6,'p_memoryInstruction','FantASMSintax.py',81),
  ('memoryInstruction -> MemoryInstName REG COMA IMM PUNTOCOMA cuerpo','memoryInstruction',6,'p_memoryInstruction','FantASMSintax.py',82),
  ('memoryInstruction -> empty','memoryInstruction',1,'p_memoryInstruction','FantASMSintax.py',83),
  ('arimtethicInstruction -> ArithmeticInstName REG COMA REG COMA REG PUNTOCOMA cuerpo','arimtethicInstruction',8,'p_arimtethicInstruction','FantASMSintax.py',91),
  ('arimtethicInstruction -> ArithmeticInstName REG COMA REG COMA IMM PUNTOCOMA cuerpo','arimtethicInstruction',8,'p_arimtethicInstruction','FantASMSintax.py',92),
  ('arimtethicInstruction -> empty','arimtethicInstruction',1,'p_arimtethicInstruction','FantASMSintax.py',93),
  ('CompareInstName -> CMPR','CompareInstName',1,'p_CompareInstName','FantASMSintax.py',105),
  ('CompareInstName -> CMPI','CompareInstName',1,'p_CompareInstName','FantASMSintax.py',106),
  ('JumpInstName -> SAL','JumpInstName',1,'p_JumpInstName','FantASMSintax.py',112),
  ('JumpInstName -> SIG','JumpInstName',1,'p_JumpInstName','FantASMSintax.py',113),
  ('JumpInstName -> SMY','JumpInstName',1,'p_JumpInstName','FantASMSintax.py',114),
  ('MemoryInstName -> GDR','MemoryInstName',1,'p_MemoryInstName','FantASMSintax.py',122),
  ('MemoryInstName -> CAR','MemoryInstName',1,'p_MemoryInstName','FantASMSintax.py',123),
  ('MemoryInstName -> MOVR','MemoryInstName',1,'p_MemoryInstName','FantASMSintax.py',124),
  ('MemoryInstName -> MOVI','MemoryInstName',1,'p_MemoryInstName','FantASMSintax.py',125),
  ('ArithmeticInstName -> SUM','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',133),
  ('ArithmeticInstName -> RES','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',134),
  ('ArithmeticInstName -> MOD','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',135),
  ('ArithmeticInstName -> MUL','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',136),
  ('ArithmeticInstName -> DDR','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',137),
  ('ArithmeticInstName -> SAL','ArithmeticInstName',1,'p_ArithmeticInstName','FantASMSintax.py',138),
  ('empty -> <empty>','empty',0,'p_empty','FantASMSintax.py',145),
]
