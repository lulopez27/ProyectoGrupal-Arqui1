
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CAR CMPI CMPR COMA DDR DOSPUNTOS ESP FIN GDR IMM INICIO LABEL MOD MOVI MOVR MUL PUNTOCOMA REG RES SAL SIG SUM\n    Start : code\n    \n    code : INICIO DOSPUNTOS cuerpo FIN\n    \n    cuerpo : instruccion\n            | label\n\n    \n    label : LABEL DOSPUNTOS cuerpo\n            | empty\n    \n    instruccion : instName REG COMA REG COMA REG PUNTOCOMA cuerpo\n                | instName REG COMA REG COMA IMM PUNTOCOMA cuerpo\n                | empty\n    \n    instName : GDR\n            | CAR\n            | MOVR\n            | MOVI\n            | SUM\n            | RES\n            | MOD\n            | MUL\n            | DDR\n            | CMPR\n            | CMPI\n            | SAL\n            | SIG\n            | ESP\n    \n    empty :\n    '
    
_lr_action_items = {'INICIO':([0,],[3,]),'$end':([1,2,25,],[0,-1,-2,]),'DOSPUNTOS':([3,10,],[4,27,]),'LABEL':([4,27,34,35,],[10,10,10,10,]),'GDR':([4,27,34,35,],[11,11,11,11,]),'CAR':([4,27,34,35,],[12,12,12,12,]),'MOVR':([4,27,34,35,],[13,13,13,13,]),'MOVI':([4,27,34,35,],[14,14,14,14,]),'SUM':([4,27,34,35,],[15,15,15,15,]),'RES':([4,27,34,35,],[16,16,16,16,]),'MOD':([4,27,34,35,],[17,17,17,17,]),'MUL':([4,27,34,35,],[18,18,18,18,]),'DDR':([4,27,34,35,],[19,19,19,19,]),'CMPR':([4,27,34,35,],[20,20,20,20,]),'CMPI':([4,27,34,35,],[21,21,21,21,]),'SAL':([4,27,34,35,],[22,22,22,22,]),'SIG':([4,27,34,35,],[23,23,23,23,]),'ESP':([4,27,34,35,],[24,24,24,24,]),'FIN':([4,5,6,7,9,27,29,34,35,36,37,],[-24,25,-3,-4,-6,-24,-5,-24,-24,-7,-8,]),'REG':([8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,31,],[26,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,30,32,]),'COMA':([26,30,],[28,31,]),'IMM':([31,],[33,]),'PUNTOCOMA':([32,33,],[34,35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'code':([0,],[2,]),'cuerpo':([4,27,34,35,],[5,29,36,37,]),'instruccion':([4,27,34,35,],[6,6,6,6,]),'label':([4,27,34,35,],[7,7,7,7,]),'instName':([4,27,34,35,],[8,8,8,8,]),'empty':([4,27,34,35,],[9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> code','Start',1,'p_Start','FantASMSintax.py',12),
  ('code -> INICIO DOSPUNTOS cuerpo FIN','code',4,'p_Code','FantASMSintax.py',18),
  ('cuerpo -> instruccion','cuerpo',1,'p_cuerpo','FantASMSintax.py',26),
  ('cuerpo -> label','cuerpo',1,'p_cuerpo','FantASMSintax.py',27),
  ('label -> LABEL DOSPUNTOS cuerpo','label',3,'p_label','FantASMSintax.py',34),
  ('label -> empty','label',1,'p_label','FantASMSintax.py',35),
  ('instruccion -> instName REG COMA REG COMA REG PUNTOCOMA cuerpo','instruccion',8,'p_instruccion','FantASMSintax.py',40),
  ('instruccion -> instName REG COMA REG COMA IMM PUNTOCOMA cuerpo','instruccion',8,'p_instruccion','FantASMSintax.py',41),
  ('instruccion -> empty','instruccion',1,'p_instruccion','FantASMSintax.py',42),
  ('instName -> GDR','instName',1,'p_instName','FantASMSintax.py',48),
  ('instName -> CAR','instName',1,'p_instName','FantASMSintax.py',49),
  ('instName -> MOVR','instName',1,'p_instName','FantASMSintax.py',50),
  ('instName -> MOVI','instName',1,'p_instName','FantASMSintax.py',51),
  ('instName -> SUM','instName',1,'p_instName','FantASMSintax.py',52),
  ('instName -> RES','instName',1,'p_instName','FantASMSintax.py',53),
  ('instName -> MOD','instName',1,'p_instName','FantASMSintax.py',54),
  ('instName -> MUL','instName',1,'p_instName','FantASMSintax.py',55),
  ('instName -> DDR','instName',1,'p_instName','FantASMSintax.py',56),
  ('instName -> CMPR','instName',1,'p_instName','FantASMSintax.py',57),
  ('instName -> CMPI','instName',1,'p_instName','FantASMSintax.py',58),
  ('instName -> SAL','instName',1,'p_instName','FantASMSintax.py',59),
  ('instName -> SIG','instName',1,'p_instName','FantASMSintax.py',60),
  ('instName -> ESP','instName',1,'p_instName','FantASMSintax.py',61),
  ('empty -> <empty>','empty',0,'p_empty','FantASMSintax.py',68),
]
